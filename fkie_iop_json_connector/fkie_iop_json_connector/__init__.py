# ****************************************************************************
#
# Copyright (c) 2014-2024 Fraunhofer FKIE
# Author: Alexander Tiderko
# License: MIT
#
# ****************************************************************************

import argparse
import sys
import logging

from .logger import MyLogger
from .server import Server

__version__ = '0.1.0'

server = None


def set_terminal_name(name):
    '''
    Change the terminal name.

    :param str name: New name of the terminal
    '''
    sys.stdout.write("\x1b]2;%s\x07" % name)


def set_process_name(name):
    '''
    Change the process name.

    :param str name: name new process name
    '''
    try:
        from ctypes import cdll, byref, create_string_buffer
        libc = cdll.LoadLibrary('libc.so.6')
        buff = create_string_buffer(len(name) + 1)
        buff.value = name
        libc.prctl(15, byref(buff), 0, 0, 0)
    except Exception:
        pass


def init_arg_parser():
    global __version__
    parser = argparse.ArgumentParser()
    parser.add_argument("--version", action="version",
                        version="%s" % (__version__))
    parser.add_argument("-p", "--port", nargs='?', type=int,
                        default=37948, help="websocket port, Default: 37948")
    parser.add_argument("-u", "--uri", nargs='?', type=str, default='localhost:3794',
                        help="Address of the IOP node manager. Default: localhost:3794")
    parser.add_argument("-l", "--log-level", nargs='?', type=str,
                        default='info', help="Sets log level. Default: info")
    parser.add_argument("-s", "--schemes-path", nargs='?', type=str, default='',
                        help="Different path to JSON schemes with message definitions, generated by fkie_iop_generator_json. Default: internal schemes")
    return parser


def start(name, block=True, argv=None):
    '''
    Start the IOP NodeManager

    :param str name: the process name
    :param bool block: block until Ctrl+C or shutdown signal
    :param list argv: if argv is None uses sys.argv parameter (used in testunit)
    '''
    logging.basicConfig(level=logging.INFO)
    set_terminal_name(name)
    set_process_name(name)
    parser = init_arg_parser()
    parsed_args, remaining_args = parser.parse_known_args()
    global __version__
    global server
    try:
        logger = MyLogger('init[%s]' % name, parsed_args.log_level)
        logger.info(f"port: {parsed_args.port}")
        logger.info(f"uri: {parsed_args.uri}")
        logger.info(f"log-level: {parsed_args.log_level}")
        logger.info(f"schemes-path: {parsed_args.schemes_path}")
        server = Server(parsed_args.port, parsed_args.uri,
                        parsed_args.log_level, parsed_args.schemes_path, __version__)
        server.start(block)
    except Exception as err:
        import traceback
        raise Exception(
            f"Error while start node manager: {traceback.format_exc()}")
    if block:
        shutdown()


def shutdown():
    global server
    server.shutdown()
    print("Bye")


def main(args=None):
    try:
        import rclpy
    except ModuleNotFoundError:
        try:
            import rospy
        except ModuleNotFoundError:
            raise Exception("can't import rclpy nor rospy")
        else:
            run_ros1(args)
    else:
        run_ros2(args)


def run_ros2(args=None):
    try:
        import rclpy
        from rclpy.node import Node

        class DummyNode(Node):
            def __init__(self):
                super().__init__("iop_json_connector")

        rclpy.init(args=args)
        node = DummyNode()
        start(node.get_name(), block=False)
        rclpy.spin(node)
    except KeyboardInterrupt:
        print('stop iop_json_connector')
    finally:
        try:
            shutdown()
            node.destroy_node()
            rclpy.shutdown()
        except Exception:
            pass


def run_ros1(args=None):
    try:
        import rospy

        def get_ros_loglevel(loglevel):
            if loglevel == 'info':
                return rospy.INFO
            elif loglevel == 'debug':
                return rospy.DEBUG
            elif loglevel == 'warning':
                return rospy.WARN
            elif loglevel == 'error':
                return rospy.ERROR
            elif loglevel == 'critical':
                return rospy.FATAL

        rospy.names.reload_mappings(sys.argv)
        mappings = rospy.names.get_mappings()
        name = "iop_node_manager"
        if '__name' in mappings:
            name = mappings['__name']
        global server
        start(name, block=False)
        rospy.init_node(name, log_level=get_ros_loglevel(server.logLevel))
        rospy.spin()
    finally:
        try:
            shutdown()
        except Exception:
            pass
